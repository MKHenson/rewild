type Query {
  system: System!
  file(id: String!): File

  """Gets a paginated list of files"""
  files(index: Int = 0, limit: Int = 10, search: String, sortOrder: SortOrder = asc, sortType: FileSortType = created): PaginatedFilesResponse!
  project(id: String!): Project

  """Gets a paginated list of files"""
  projects(index: Int = 0, limit: Int = 10): PaginatedProjectResponse!
}

"""Object representing the server system"""
type System {
  status: String!
}

"""Object representing a File"""
type File {
  id: String!
  name: String!
  publicURL: String!
  mimeType: String!
  created: Long!
  updated: Long!
  size: Long!
}

"""64-bit integral numbers"""
scalar Long

"""A page of wrapper of files"""
type PaginatedFilesResponse {
  data: [File!]!
  count: Int!
  limit: Int!
  index: Int!
}

enum SortOrder {
  asc
  desc
}

"""The type of sorting performed when fetching files"""
enum FileSortType {
  created
  memory
  name
}

"""Object representing a Project"""
type Project {
  id: String!
  name: String!
  created: Long!
  lastUpdated: Long!
}

"""A page of wrapper of files"""
type PaginatedProjectResponse {
  data: [Project!]!
  count: Int!
  limit: Int!
  index: Int!
}

type Mutation {
  removeFile(id: String!): Boolean!
  removeProject(id: String!): Boolean!
  addProject(project: AddProjectInput!): Project
  patchProject(project: UpdateProjectInput!): Project
}

input AddProjectInput {
  name: String!
}

input UpdateProjectInput {
  id: String!
  name: String!
}
